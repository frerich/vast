include "uuid.fbs";

namespace vast.fbs;

table ValueIndex {
  /// The type of the index.
  type: string; // TODO: use the Type flatbuffer once available.

  /// The serialized `vast::value_index`.
  data: [ubyte];
}

table QualifiedValueIndex {
  /// The full-qualified field name, e.g., "zeek.conn.id.orig_h".
  qualified_field_name: string;

  /// The value index for the given field.
  index: ValueIndex;
}

table TypeIds {
  /// The type name.
  name: string;

  /// The serialized `vast::ids`.
  ids: [ubyte];
}

/// The persistent state of the meta index.
//  TODO: Add a `Version` field.
table Partition {
  /// The UUID of this partition.
  uuid: UUID;

  /// A human-readable name for this partition
  name: string;

  /// The first ID in the partition.
  offset: uint64;

  /// The number of contained events.
  events: uint64;

  /// The available layouts in this partition.
  combined_layout: [ubyte]; // TODO: use the layout type once availble

  /// A map storing the mapping from type name -> ids
  type_ids: [TypeIds]; // TODO: We might be able to reconstruct this mapping from the indices as well

  /// The contained value indexes.
  indexes: [QualifiedValueIndex];
}

root_type Partition;

file_identifier "VAST";
